
lcd_final.elf:     file format elf32-littlenios2
lcd_final.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x000004d4 memsz 0x000004e4 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000004b8  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  000014d8  000014d8  000014d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000010  000014f4  000014f4  000014f4  2**2
                  ALLOC, SMALL_DATA
  4 .comment      00000026  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001520  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000215  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b45  00000000  00000000  000018bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a8  00000000  00000000  00002402  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000172d  00000000  00000000  000029aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000234  00000000  00000000  000040d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000559  00000000  00000000  0000430c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003d7  00000000  00000000  00004865  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000040  00000000  00000000  00004c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  00004c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00005a3c  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000c  00000000  00000000  00005a3f  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00005a4b  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00005a4c  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   0000000b  00000000  00000000  00005a4d  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    0000000b  00000000  00000000  00005a58  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   0000000b  00000000  00000000  00005a63  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 00000008  00000000  00000000  00005a6e  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 0000001c  00000000  00000000  00005a76  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     00034f9e  00000000  00000000  00005a92  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .text	00000000 .text
000014d8 l    d  .rodata	00000000 .rodata
000014f4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
000011d8 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001354 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00001264 g     F .text	0000002c alt_main
000014f4 g       *ABS*	00000000 __flash_rwdata_start
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
000014f8 g     O .bss	00000004 alt_argv
000094f4 g       *ABS*	00000000 _gp
00001290 g     F .text	00000004 usleep
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00001490 g     F .text	00000008 __udivsi3
0000105c g     F .text	00000064 ESCRIBE_MENSAJE
00001504 g       *ABS*	00000000 __bss_end
00001344 g     F .text	00000004 alt_dcache_flush_all
000014f4 g       *ABS*	00000000 __ram_rwdata_end
000014f4 g       *ABS*	00000000 __ram_rodata_end
00001500 g     O .bss	00000004 jtag_uart_0
00001498 g     F .text	00000008 __umodsi3
00001504 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001020 g     F .text	0000003c _start
00001294 g     F .text	00000004 alt_sys_init
000014a0 g     F .text	00000038 __mulsi3
000014f4 g       *ABS*	00000000 __ram_rwdata_start
000014d8 g       *ABS*	00000000 __ram_rodata_start
000012b8 g     F .text	0000008c alt_busy_sleep
00001504 g       *ABS*	00000000 __alt_stack_base
000014f4 g       *ABS*	00000000 __bss_start
000010c0 g     F .text	000000c0 lcd_init
00001180 g     F .text	00000058 main
000014fc g     O .bss	00000004 alt_envp
000013d0 g     F .text	00000060 __divsi3
000014d8 g       *ABS*	00000000 __flash_rodata_start
00001298 g     F .text	00000020 alt_irq_init
000014f4 g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
000014f4 g       *ABS*	00000000 _edata
00001504 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
0000134c g     F .text	00000008 altera_nios2_qsys_irq_init
0000100c g       .entry	00000000 exit
00001430 g     F .text	00000060 __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
00001348 g     F .text	00000004 alt_icache_flush_all
000011f8 g     F .text	0000006c alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a53d14 	ori	gp,gp,38132
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10853d14 	ori	r2,r2,5364

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c54114 	ori	r3,r3,5380

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00011f80 	call	11f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00012640 	call	1264 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <alt_after_alt_main>

0000105c <ESCRIBE_MENSAJE>:
	 IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x01);
	 usleep(2000);
}

void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam)
{
    105c:	defffc04 	addi	sp,sp,-16
    1060:	dc800215 	stw	r18,8(sp)
    1064:	dc400115 	stw	r17,4(sp)
    1068:	dc000015 	stw	r16,0(sp)
    106c:	2025883a 	mov	r18,r4
    1070:	2823883a 	mov	r17,r5
    1074:	0021883a 	mov	r16,zero
    1078:	dfc00315 	stw	ra,12(sp)
    107c:	00000606 	br	1098 <ESCRIBE_MENSAJE+0x3c>
	unsigned char i = 0;
	for(i = 0; i<tam; i++)
	{
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, cadena[i]);
    1080:	20c00007 	ldb	r3,0(r4)
    1084:	00948204 	movi	r2,21000
    1088:	10c00035 	stwio	r3,0(r2)
		usleep(100);
    108c:	01001904 	movi	r4,100
    1090:	00012900 	call	1290 <usleep>
}

void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam)
{
	unsigned char i = 0;
	for(i = 0; i<tam; i++)
    1094:	84000044 	addi	r16,r16,1
    1098:	80c03fcc 	andi	r3,r16,255
    109c:	88803fcc 	andi	r2,r17,255
	{
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, cadena[i]);
    10a0:	90c9883a 	add	r4,r18,r3
}

void ESCRIBE_MENSAJE(const char *cadena,unsigned char tam)
{
	unsigned char i = 0;
	for(i = 0; i<tam; i++)
    10a4:	18bff61e 	bne	r3,r2,1080 <ESCRIBE_MENSAJE+0x24>
	{
		IOWR(LCD_0_BASE, LCD_WR_DATA_REG, cadena[i]);
		usleep(100);
	}
}
    10a8:	dfc00317 	ldw	ra,12(sp)
    10ac:	dc800217 	ldw	r18,8(sp)
    10b0:	dc400117 	ldw	r17,4(sp)
    10b4:	dc000017 	ldw	r16,0(sp)
    10b8:	dec00404 	addi	sp,sp,16
    10bc:	f800283a 	ret

000010c0 <lcd_init>:
#define LCD_RD_STATUS_REG 1
#define LCD_WR_DATA_REG 2
#define LCD_RD_DATA_REG 3
#define LCD_0_BASE 0x5200

void lcd_init(void){
    10c0:	defffc04 	addi	sp,sp,-16
	 usleep(15000);
    10c4:	010ea604 	movi	r4,15000
#define LCD_RD_STATUS_REG 1
#define LCD_WR_DATA_REG 2
#define LCD_RD_DATA_REG 3
#define LCD_0_BASE 0x5200

void lcd_init(void){
    10c8:	dc400115 	stw	r17,4(sp)
    10cc:	dc000015 	stw	r16,0(sp)
    10d0:	dfc00315 	stw	ra,12(sp)
    10d4:	dc800215 	stw	r18,8(sp)
	 usleep(15000);
	 IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
    10d8:	04148004 	movi	r16,20992
#define LCD_WR_DATA_REG 2
#define LCD_RD_DATA_REG 3
#define LCD_0_BASE 0x5200

void lcd_init(void){
	 usleep(15000);
    10dc:	00012900 	call	1290 <usleep>
	 IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
    10e0:	04400e04 	movi	r17,56
    10e4:	84400035 	stwio	r17,0(r16)
	 usleep(4100);
    10e8:	01040104 	movi	r4,4100
    10ec:	00012900 	call	1290 <usleep>
	 IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
    10f0:	84400035 	stwio	r17,0(r16)
	 usleep(100);
    10f4:	04801904 	movi	r18,100
    10f8:	9009883a 	mov	r4,r18
    10fc:	00012900 	call	1290 <usleep>
	 IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
    1100:	84400035 	stwio	r17,0(r16)
	 usleep(5000);
    1104:	0104e204 	movi	r4,5000
    1108:	00012900 	call	1290 <usleep>
	 IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x38);
    110c:	84400035 	stwio	r17,0(r16)
	 usleep(100);
    1110:	9009883a 	mov	r4,r18
    1114:	00012900 	call	1290 <usleep>
	 IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x08);
    1118:	00800204 	movi	r2,8
    111c:	80800035 	stwio	r2,0(r16)
	 usleep(100);
    1120:	9009883a 	mov	r4,r18
    1124:	00012900 	call	1290 <usleep>
	 IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x0C);
    1128:	00800304 	movi	r2,12
    112c:	80800035 	stwio	r2,0(r16)
	 usleep(100);
    1130:	9009883a 	mov	r4,r18
    1134:	00012900 	call	1290 <usleep>
	 IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x06);
    1138:	00800184 	movi	r2,6
    113c:	80800035 	stwio	r2,0(r16)
	 usleep(100);
    1140:	9009883a 	mov	r4,r18
    1144:	00012900 	call	1290 <usleep>
	 IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x02);
    1148:	00800084 	movi	r2,2
    114c:	80800035 	stwio	r2,0(r16)
	 usleep(2000);
    1150:	0441f404 	movi	r17,2000
    1154:	8809883a 	mov	r4,r17
    1158:	00012900 	call	1290 <usleep>
	 IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x01);
    115c:	00800044 	movi	r2,1
    1160:	80800035 	stwio	r2,0(r16)
	 usleep(2000);
    1164:	8809883a 	mov	r4,r17
}
    1168:	dfc00317 	ldw	ra,12(sp)
    116c:	dc800217 	ldw	r18,8(sp)
    1170:	dc400117 	ldw	r17,4(sp)
    1174:	dc000017 	ldw	r16,0(sp)
    1178:	dec00404 	addi	sp,sp,16
	 IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x06);
	 usleep(100);
	 IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x02);
	 usleep(2000);
	 IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x01);
	 usleep(2000);
    117c:	00012901 	jmpi	1290 <usleep>

00001180 <main>:
		usleep(100);
	}
}

void main(void)
{
    1180:	defffe04 	addi	sp,sp,-8
    1184:	dc000015 	stw	r16,0(sp)
    1188:	dfc00115 	stw	ra,4(sp)
	lcd_init();
    118c:	00010c00 	call	10c0 <lcd_init>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0x02); //Primera linea
    1190:	04148004 	movi	r16,20992
    1194:	00800084 	movi	r2,2
    1198:	80800035 	stwio	r2,0(r16)
	usleep(2000);
    119c:	0101f404 	movi	r4,2000
    11a0:	00012900 	call	1290 <usleep>
	ESCRIBE_MENSAJE("Hola UPC", 8);
    11a4:	01400204 	movi	r5,8
    11a8:	01000034 	movhi	r4,0
    11ac:	21053604 	addi	r4,r4,5336
    11b0:	000105c0 	call	105c <ESCRIBE_MENSAJE>
	IOWR(LCD_0_BASE, LCD_WR_COMMAND_REG, 0xC0); //Segunda linea
    11b4:	00803004 	movi	r2,192
    11b8:	80800035 	stwio	r2,0(r16)
	usleep(2000);
    11bc:	0101f404 	movi	r4,2000
    11c0:	00012900 	call	1290 <usleep>
	ESCRIBE_MENSAJE("Sist. Digitales", 15);
    11c4:	014003c4 	movi	r5,15
    11c8:	01000034 	movhi	r4,0
    11cc:	21053904 	addi	r4,r4,5348
    11d0:	000105c0 	call	105c <ESCRIBE_MENSAJE>
    11d4:	003fff06 	br	11d4 <main+0x54>

000011d8 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    11d8:	2900051e 	bne	r5,r4,11f0 <alt_load_section+0x18>
    11dc:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    11e0:	20800017 	ldw	r2,0(r4)
    11e4:	21000104 	addi	r4,r4,4
    11e8:	28800015 	stw	r2,0(r5)
    11ec:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    11f0:	29bffb1e 	bne	r5,r6,11e0 <alt_load_section+0x8>
    11f4:	f800283a 	ret

000011f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    11f8:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    11fc:	01000034 	movhi	r4,0
    1200:	21053d04 	addi	r4,r4,5364
    1204:	01400034 	movhi	r5,0
    1208:	29453d04 	addi	r5,r5,5364
    120c:	01800034 	movhi	r6,0
    1210:	31853d04 	addi	r6,r6,5364
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1214:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1218:	00011d80 	call	11d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    121c:	01000034 	movhi	r4,0
    1220:	21040804 	addi	r4,r4,4128
    1224:	01400034 	movhi	r5,0
    1228:	29440804 	addi	r5,r5,4128
    122c:	01800034 	movhi	r6,0
    1230:	31840804 	addi	r6,r6,4128
    1234:	00011d80 	call	11d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    1238:	01000034 	movhi	r4,0
    123c:	21053604 	addi	r4,r4,5336
    1240:	01400034 	movhi	r5,0
    1244:	29453604 	addi	r5,r5,5336
    1248:	01800034 	movhi	r6,0
    124c:	31853d04 	addi	r6,r6,5364
    1250:	00011d80 	call	11d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1254:	00013440 	call	1344 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1258:	dfc00017 	ldw	ra,0(sp)
    125c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1260:	00013481 	jmpi	1348 <alt_icache_flush_all>

00001264 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1264:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1268:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    126c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1270:	00012980 	call	1298 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1274:	00012940 	call	1294 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1278:	d1200017 	ldw	r4,-32768(gp)
    127c:	d1600117 	ldw	r5,-32764(gp)
    1280:	d1a00217 	ldw	r6,-32760(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1284:	dfc00017 	ldw	ra,0(sp)
    1288:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    128c:	00011801 	jmpi	1180 <main>

00001290 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    1290:	00012b81 	jmpi	12b8 <alt_busy_sleep>

00001294 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_LCD_16207_INIT ( LCD_16207_0, lcd_16207_0);
}
    1294:	f800283a 	ret

00001298 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1298:	deffff04 	addi	sp,sp,-4
    129c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    12a0:	000134c0 	call	134c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    12a4:	00800044 	movi	r2,1
    12a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    12ac:	dfc00017 	ldw	ra,0(sp)
    12b0:	dec00104 	addi	sp,sp,4
    12b4:	f800283a 	ret

000012b8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    12b8:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    12bc:	014666b4 	movhi	r5,6554
    12c0:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    12c4:	dc000015 	stw	r16,0(sp)
    12c8:	dfc00115 	stw	ra,4(sp)
    12cc:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    12d0:	00014900 	call	1490 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    12d4:	10001126 	beq	r2,zero,131c <alt_busy_sleep+0x64>
    12d8:	0007883a 	mov	r3,zero
    12dc:	01200034 	movhi	r4,32768
    12e0:	213fffc4 	addi	r4,r4,-1
    12e4:	017999b4 	movhi	r5,58982
    12e8:	295999c4 	addi	r5,r5,26215
    12ec:	00000406 	br	1300 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    12f0:	213fffc4 	addi	r4,r4,-1
    12f4:	203ffe1e 	bne	r4,zero,12f0 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    12f8:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    12fc:	18c00044 	addi	r3,r3,1
    1300:	18bffb16 	blt	r3,r2,12f0 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    1304:	8009883a 	mov	r4,r16
    1308:	01400144 	movi	r5,5
    130c:	00014a00 	call	14a0 <__mulsi3>
    1310:	10bfffc4 	addi	r2,r2,-1
    1314:	103ffe1e 	bne	r2,zero,1310 <alt_busy_sleep+0x58>
    1318:	00000506 	br	1330 <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    131c:	8009883a 	mov	r4,r16
    1320:	01400144 	movi	r5,5
    1324:	00014a00 	call	14a0 <__mulsi3>
    1328:	10bfffc4 	addi	r2,r2,-1
    132c:	00bffe16 	blt	zero,r2,1328 <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    1330:	0005883a 	mov	r2,zero
    1334:	dfc00117 	ldw	ra,4(sp)
    1338:	dc000017 	ldw	r16,0(sp)
    133c:	dec00204 	addi	sp,sp,8
    1340:	f800283a 	ret

00001344 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1344:	f800283a 	ret

00001348 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    1348:	f800283a 	ret

0000134c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    134c:	000170fa 	wrctl	ienable,zero
}
    1350:	f800283a 	ret

00001354 <udivmodsi4>:
    1354:	29001b2e 	bgeu	r5,r4,13c4 <udivmodsi4+0x70>
    1358:	28001a16 	blt	r5,zero,13c4 <udivmodsi4+0x70>
    135c:	00800044 	movi	r2,1
    1360:	0007883a 	mov	r3,zero
    1364:	01c007c4 	movi	r7,31
    1368:	00000306 	br	1378 <udivmodsi4+0x24>
    136c:	19c01326 	beq	r3,r7,13bc <udivmodsi4+0x68>
    1370:	18c00044 	addi	r3,r3,1
    1374:	28000416 	blt	r5,zero,1388 <udivmodsi4+0x34>
    1378:	294b883a 	add	r5,r5,r5
    137c:	1085883a 	add	r2,r2,r2
    1380:	293ffa36 	bltu	r5,r4,136c <udivmodsi4+0x18>
    1384:	10000d26 	beq	r2,zero,13bc <udivmodsi4+0x68>
    1388:	0007883a 	mov	r3,zero
    138c:	21400236 	bltu	r4,r5,1398 <udivmodsi4+0x44>
    1390:	2149c83a 	sub	r4,r4,r5
    1394:	1886b03a 	or	r3,r3,r2
    1398:	1004d07a 	srli	r2,r2,1
    139c:	280ad07a 	srli	r5,r5,1
    13a0:	103ffa1e 	bne	r2,zero,138c <udivmodsi4+0x38>
    13a4:	30000226 	beq	r6,zero,13b0 <udivmodsi4+0x5c>
    13a8:	2005883a 	mov	r2,r4
    13ac:	f800283a 	ret
    13b0:	1809883a 	mov	r4,r3
    13b4:	2005883a 	mov	r2,r4
    13b8:	f800283a 	ret
    13bc:	0007883a 	mov	r3,zero
    13c0:	003ff806 	br	13a4 <udivmodsi4+0x50>
    13c4:	00800044 	movi	r2,1
    13c8:	0007883a 	mov	r3,zero
    13cc:	003fef06 	br	138c <udivmodsi4+0x38>

000013d0 <__divsi3>:
    13d0:	defffe04 	addi	sp,sp,-8
    13d4:	dc000015 	stw	r16,0(sp)
    13d8:	dfc00115 	stw	ra,4(sp)
    13dc:	0021883a 	mov	r16,zero
    13e0:	20000c16 	blt	r4,zero,1414 <__divsi3+0x44>
    13e4:	000d883a 	mov	r6,zero
    13e8:	28000e16 	blt	r5,zero,1424 <__divsi3+0x54>
    13ec:	00013540 	call	1354 <udivmodsi4>
    13f0:	1007883a 	mov	r3,r2
    13f4:	8005003a 	cmpeq	r2,r16,zero
    13f8:	1000011e 	bne	r2,zero,1400 <__divsi3+0x30>
    13fc:	00c7c83a 	sub	r3,zero,r3
    1400:	1805883a 	mov	r2,r3
    1404:	dfc00117 	ldw	ra,4(sp)
    1408:	dc000017 	ldw	r16,0(sp)
    140c:	dec00204 	addi	sp,sp,8
    1410:	f800283a 	ret
    1414:	0109c83a 	sub	r4,zero,r4
    1418:	04000044 	movi	r16,1
    141c:	000d883a 	mov	r6,zero
    1420:	283ff20e 	bge	r5,zero,13ec <__divsi3+0x1c>
    1424:	014bc83a 	sub	r5,zero,r5
    1428:	8021003a 	cmpeq	r16,r16,zero
    142c:	003fef06 	br	13ec <__divsi3+0x1c>

00001430 <__modsi3>:
    1430:	deffff04 	addi	sp,sp,-4
    1434:	dfc00015 	stw	ra,0(sp)
    1438:	01800044 	movi	r6,1
    143c:	2807883a 	mov	r3,r5
    1440:	20000416 	blt	r4,zero,1454 <__modsi3+0x24>
    1444:	28000c16 	blt	r5,zero,1478 <__modsi3+0x48>
    1448:	dfc00017 	ldw	ra,0(sp)
    144c:	dec00104 	addi	sp,sp,4
    1450:	00013541 	jmpi	1354 <udivmodsi4>
    1454:	0109c83a 	sub	r4,zero,r4
    1458:	28000b16 	blt	r5,zero,1488 <__modsi3+0x58>
    145c:	180b883a 	mov	r5,r3
    1460:	01800044 	movi	r6,1
    1464:	00013540 	call	1354 <udivmodsi4>
    1468:	0085c83a 	sub	r2,zero,r2
    146c:	dfc00017 	ldw	ra,0(sp)
    1470:	dec00104 	addi	sp,sp,4
    1474:	f800283a 	ret
    1478:	014bc83a 	sub	r5,zero,r5
    147c:	dfc00017 	ldw	ra,0(sp)
    1480:	dec00104 	addi	sp,sp,4
    1484:	00013541 	jmpi	1354 <udivmodsi4>
    1488:	0147c83a 	sub	r3,zero,r5
    148c:	003ff306 	br	145c <__modsi3+0x2c>

00001490 <__udivsi3>:
    1490:	000d883a 	mov	r6,zero
    1494:	00013541 	jmpi	1354 <udivmodsi4>

00001498 <__umodsi3>:
    1498:	01800044 	movi	r6,1
    149c:	00013541 	jmpi	1354 <udivmodsi4>

000014a0 <__mulsi3>:
    14a0:	20000a26 	beq	r4,zero,14cc <__mulsi3+0x2c>
    14a4:	0007883a 	mov	r3,zero
    14a8:	2080004c 	andi	r2,r4,1
    14ac:	1005003a 	cmpeq	r2,r2,zero
    14b0:	2008d07a 	srli	r4,r4,1
    14b4:	1000011e 	bne	r2,zero,14bc <__mulsi3+0x1c>
    14b8:	1947883a 	add	r3,r3,r5
    14bc:	294b883a 	add	r5,r5,r5
    14c0:	203ff91e 	bne	r4,zero,14a8 <__mulsi3+0x8>
    14c4:	1805883a 	mov	r2,r3
    14c8:	f800283a 	ret
    14cc:	0007883a 	mov	r3,zero
    14d0:	1805883a 	mov	r2,r3
    14d4:	f800283a 	ret
